Help on class CanvasWidget in nltk.draw.util:

nltk.draw.util.CanvasWidget = class CanvasWidget(builtins.object)
 |  nltk.draw.util.CanvasWidget(canvas, parent=None, **attribs)
 |  
 |  A collection of graphical elements and bindings used to display a
 |  complex object on a Tkinter ``Canvas``.  A canvas widget is
 |  responsible for managing the ``Canvas`` tags and callback bindings
 |  necessary to display and interact with the object.  Canvas widgets
 |  are often organized into hierarchies, where parent canvas widgets
 |  control aspects of their child widgets.
 |  
 |  Each canvas widget is bound to a single ``Canvas``.  This ``Canvas``
 |  is specified as the first argument to the ``CanvasWidget``'s
 |  constructor.
 |  
 |  Attributes.  Each canvas widget can support a variety of
 |  "attributes", which control how the canvas widget is displayed.
 |  Some typical examples attributes are ``color``, ``font``, and
 |  ``radius``.  Each attribute has a default value.  This default
 |  value can be overridden in the constructor, using keyword
 |  arguments of the form ``attribute=value``:
 |  
 |      >>> from nltk.draw.util import TextWidget
 |      >>> cn = TextWidget(c, 'test', color='red')
 |  
 |  Attribute values can also be changed after a canvas widget has
 |  been constructed, using the ``__setitem__`` operator:
 |  
 |      >>> cn['font'] = 'times'
 |  
 |  The current value of an attribute value can be queried using the
 |  ``__getitem__`` operator:
 |  
 |      >>> cn['color']
 |      red
 |  
 |  For a list of the attributes supported by a type of canvas widget,
 |  see its class documentation.
 |  
 |  Interaction.  The attribute ``'draggable'`` controls whether the
 |  user can drag a canvas widget around the canvas.  By default,
 |  canvas widgets are not draggable.
 |  
 |  ``CanvasWidget`` provides callback support for two types of user
 |  interaction: clicking and dragging.  The method ``bind_click``
 |  registers a callback function that is called whenever the canvas
 |  widget is clicked.  The method ``bind_drag`` registers a callback
 |  function that is called after the canvas widget is dragged.  If
 |  the user clicks or drags a canvas widget with no registered
 |  callback function, then the interaction event will propagate to
 |  its parent.  For each canvas widget, only one callback function
 |  may be registered for an interaction event.  Callback functions
 |  can be deregistered with the ``unbind_click`` and ``unbind_drag``
 |  methods.
 |  
 |  Subclassing.  ``CanvasWidget`` is an abstract class.  Subclasses
 |  are required to implement the following methods:
 |  
 |    - ``__init__``: Builds a new canvas widget.  It must perform the
 |      following three tasks (in order):
 |        - Create any new graphical elements.
 |        - Call ``_add_child_widget`` on each child widget.
 |        - Call the ``CanvasWidget`` constructor.
 |    - ``_tags``: Returns a list of the canvas tags for all graphical
 |      elements managed by this canvas widget, not including
 |      graphical elements managed by its child widgets.
 |    - ``_manage``: Arranges the child widgets of this canvas widget.
 |      This is typically only called when the canvas widget is
 |      created.
 |    - ``_update``: Update this canvas widget in response to a
 |      change in a single child.
 |  
 |  For a ``CanvasWidget`` with no child widgets, the default
 |  definitions for ``_manage`` and ``_update`` may be used.
 |  
 |  If a subclass defines any attributes, then it should implement
 |  ``__getitem__`` and ``__setitem__``.  If either of these methods is
 |  called with an unknown attribute, then they should propagate the
 |  request to ``CanvasWidget``.
 |  
 |  Most subclasses implement a number of additional methods that
 |  modify the ``CanvasWidget`` in some way.  These methods must call
 |  ``parent.update(self)`` after making any changes to the canvas
 |  widget's graphical elements.  The canvas widget must also call
 |  ``parent.update(self)`` after changing any attribute value that
 |  affects the shape or position of the canvas widget's graphical
 |  elements.
 |  
 |  :type __canvas: Tkinter.Canvas
 |  :ivar __canvas: This ``CanvasWidget``'s canvas.
 |  
 |  :type __parent: CanvasWidget or None
 |  :ivar __parent: This ``CanvasWidget``'s hierarchical parent widget.
 |  :type __children: list(CanvasWidget)
 |  :ivar __children: This ``CanvasWidget``'s hierarchical child widgets.
 |  
 |  :type __updating: bool
 |  :ivar __updating: Is this canvas widget currently performing an
 |      update?  If it is, then it will ignore any new update requests
 |      from child widgets.
 |  
 |  :type __draggable: bool
 |  :ivar __draggable: Is this canvas widget draggable?
 |  :type __press: event
 |  :ivar __press: The ButtonPress event that we're currently handling.
 |  :type __drag_x: int
 |  :ivar __drag_x: Where it's been moved to (to find dx)
 |  :type __drag_y: int
 |  :ivar __drag_y: Where it's been moved to (to find dy)
 |  :type __callbacks: dictionary
 |  :ivar __callbacks: Registered callbacks.  Currently, four keys are
 |      used: ``1``, ``2``, ``3``, and ``'drag'``.  The values are
 |      callback functions.  Each callback function takes a single
 |      argument, which is the ``CanvasWidget`` that triggered the
 |      callback.
 |  
 |  Methods defined here:
 |  
 |  __getitem__(self, attr)
 |      :return: the value of the attribute ``attr``.  See the class
 |          documentation for a list of attributes supported by this
 |          canvas widget.
 |      :rtype: (any)
 |  
 |  __init__(self, canvas, parent=None, **attribs)
 |      Create a new canvas widget.  This constructor should only be
 |      called by subclass constructors; and it should be called only
 |      "after" the subclass has constructed all graphical canvas
 |      objects and registered all child widgets.
 |      
 |      :param canvas: This canvas widget's canvas.
 |      :type canvas: Tkinter.Canvas
 |      :param parent: This canvas widget's hierarchical parent.
 |      :type parent: CanvasWidget
 |      :param attribs: The new canvas widget's attributes.
 |  
 |  __repr__(self)
 |      :return: a string representation of this canvas widget.
 |      :rtype: str
 |  
 |  __setitem__(self, attr, value)
 |      Set the value of the attribute ``attr`` to ``value``.  See the
 |      class documentation for a list of attributes supported by this
 |      canvas widget.
 |      
 |      :rtype: None
 |  
 |  bbox(self)
 |      :return: A bounding box for this ``CanvasWidget``. The bounding
 |          box is a tuple of four coordinates, *(xmin, ymin, xmax, ymax)*,
 |          for a rectangle which encloses all of the canvas
 |          widget's graphical elements.  Bounding box coordinates are
 |          specified with respect to the coordinate space of the ``Canvas``.
 |      :rtype: tuple(int, int, int, int)
 |  
 |  bind_click(self, callback, button=1)
 |      Register a new callback that will be called whenever this
 |      ``CanvasWidget`` is clicked on.
 |      
 |      :type callback: function
 |      :param callback: The callback function that will be called
 |          whenever this ``CanvasWidget`` is clicked.  This function
 |          will be called with this ``CanvasWidget`` as its argument.
 |      :type button: int
 |      :param button: Which button the user should use to click on
 |          this ``CanvasWidget``.  Typically, this should be 1 (left
 |          button), 3 (right button), or 2 (middle button).
 |  
 |  bind_drag(self, callback)
 |      Register a new callback that will be called after this
 |      ``CanvasWidget`` is dragged.  This implicitly makes this
 |      ``CanvasWidget`` draggable.
 |      
 |      :type callback: function
 |      :param callback: The callback function that will be called
 |          whenever this ``CanvasWidget`` is clicked.  This function
 |          will be called with this ``CanvasWidget`` as its argument.
 |  
 |  canvas(self)
 |      :return: The canvas that this canvas widget is bound to.
 |      :rtype: Tkinter.Canvas
 |  
 |  child_widgets(self)
 |      :return: A list of the hierarchical children of this canvas
 |          widget.  These children are considered part of ``self``
 |          for purposes of user interaction.
 |      :rtype: list of CanvasWidget
 |  
 |  destroy(self)
 |      Remove this ``CanvasWidget`` from its ``Canvas``.  After a
 |      ``CanvasWidget`` has been destroyed, it should not be accessed.
 |      
 |      Note that you only need to destroy a top-level
 |      ``CanvasWidget``; its child widgets will be destroyed
 |      automatically.  If you destroy a non-top-level
 |      ``CanvasWidget``, then the entire top-level widget will be
 |      destroyed.
 |      
 |      :raise ValueError: if this ``CanvasWidget`` has a parent.
 |      :rtype: None
 |  
 |  height(self)
 |      :return: The height of this canvas widget's bounding box, in
 |          its ``Canvas``'s coordinate space.
 |      :rtype: int
 |  
 |  hidden(self)
 |      :return: True if this canvas widget is hidden.
 |      :rtype: bool
 |  
 |  hide(self)
 |      Temporarily hide this canvas widget.
 |      
 |      :rtype: None
 |  
 |  manage(self)
 |      Arrange this canvas widget and all of its descendants.
 |      
 |      :rtype: None
 |  
 |  move(self, dx, dy)
 |      Move this canvas widget by a given distance.  In particular,
 |      shift the canvas widget right by ``dx`` pixels, and down by
 |      ``dy`` pixels.  Both ``dx`` and ``dy`` may be negative, resulting
 |      in leftward or upward movement.
 |      
 |      :type dx: int
 |      :param dx: The number of pixels to move this canvas widget
 |          rightwards.
 |      :type dy: int
 |      :param dy: The number of pixels to move this canvas widget
 |          downwards.
 |      :rtype: None
 |  
 |  moveto(self, x, y, anchor='NW')
 |      Move this canvas widget to the given location.  In particular,
 |      shift the canvas widget such that the corner or side of the
 |      bounding box specified by ``anchor`` is at location (``x``,
 |      ``y``).
 |      
 |      :param x,y: The location that the canvas widget should be moved
 |          to.
 |      :param anchor: The corner or side of the canvas widget that
 |          should be moved to the specified location.  ``'N'``
 |          specifies the top center; ``'NE'`` specifies the top right
 |          corner; etc.
 |  
 |  parent(self)
 |      :return: The hierarchical parent of this canvas widget.
 |          ``self`` is considered a subpart of its parent for
 |          purposes of user interaction.
 |      :rtype: CanvasWidget or None
 |  
 |  show(self)
 |      Show a hidden canvas widget.
 |      
 |      :rtype: None
 |  
 |  tags(self)
 |      :return: a list of the canvas tags for all graphical
 |          elements managed by this canvas widget, including
 |          graphical elements managed by its child widgets.
 |      :rtype: list of int
 |  
 |  unbind_click(self, button=1)
 |      Remove a callback that was registered with ``bind_click``.
 |      
 |      :type button: int
 |      :param button: Which button the user should use to click on
 |          this ``CanvasWidget``.  Typically, this should be 1 (left
 |          button), 3 (right button), or 2 (middle button).
 |  
 |  unbind_drag(self)
 |      Remove a callback that was registered with ``bind_drag``.
 |  
 |  update(self, child)
 |      Update the graphical display of this canvas widget, and all of
 |      its ancestors, in response to a change in one of this canvas
 |      widget's children.
 |      
 |      :param child: The child widget that changed.
 |      :type child: CanvasWidget
 |  
 |  width(self)
 |      :return: The width of this canvas widget's bounding box, in
 |          its ``Canvas``'s coordinate space.
 |      :rtype: int
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset({'_tags'})

