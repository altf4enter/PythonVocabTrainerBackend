Help on multinomial_gen in scipy.stats object:

scipy.stats.multinomial = class multinomial_gen(multi_rv_generic)
 |  scipy.stats.multinomial(seed=None)
 |  
 |  A multinomial random variable.
 |  
 |  Methods
 |  -------
 |  ``pmf(x, n, p)``
 |      Probability mass function.
 |  ``logpmf(x, n, p)``
 |      Log of the probability mass function.
 |  ``rvs(n, p, size=1, random_state=None)``
 |      Draw random samples from a multinomial distribution.
 |  ``entropy(n, p)``
 |      Compute the entropy of the multinomial distribution.
 |  ``cov(n, p)``
 |      Compute the covariance matrix of the multinomial distribution.
 |  
 |  Parameters
 |  ----------
 |  x : array_like
 |      Quantiles, with the last axis of `x` denoting the components.
 |  %(_doc_default_callparams)s
 |  %(_doc_random_state)s
 |  
 |  Notes
 |  -----
 |  %(_doc_callparams_note)s
 |  
 |  Alternatively, the object may be called (as a function) to fix the `n` and
 |  `p` parameters, returning a "frozen" multinomial random variable:
 |  
 |  The probability mass function for `multinomial` is
 |  
 |  .. math::
 |  
 |      f(x) = \frac{n!}{x_1! \cdots x_k!} p_1^{x_1} \cdots p_k^{x_k},
 |  
 |  supported on :math:`x=(x_1, \ldots, x_k)` where each :math:`x_i` is a
 |  nonnegative integer and their sum is :math:`n`.
 |  
 |  .. versionadded:: 0.19.0
 |  
 |  Examples
 |  --------
 |  
 |  >>> from scipy.stats import multinomial
 |  >>> rv = multinomial(8, [0.3, 0.2, 0.5])
 |  >>> rv.pmf([1, 3, 4])
 |  0.042000000000000072
 |  
 |  The multinomial distribution for :math:`k=2` is identical to the
 |  corresponding binomial distribution (tiny numerical differences
 |  notwithstanding):
 |  
 |  >>> from scipy.stats import binom
 |  >>> multinomial.pmf([3, 4], n=7, p=[0.4, 0.6])
 |  0.29030399999999973
 |  >>> binom.pmf(3, 7, 0.4)
 |  0.29030400000000012
 |  
 |  The functions ``pmf``, ``logpmf``, ``entropy``, and ``cov`` support
 |  broadcasting, under the convention that the vector parameters (``x`` and
 |  ``p``) are interpreted as if each row along the last axis is a single
 |  object. For instance:
 |  
 |  >>> multinomial.pmf([[3, 4], [3, 5]], n=[7, 8], p=[.3, .7])
 |  array([0.2268945,  0.25412184])
 |  
 |  Here, ``x.shape == (2, 2)``, ``n.shape == (2,)``, and ``p.shape == (2,)``,
 |  but following the rules mentioned above they behave as if the rows
 |  ``[3, 4]`` and ``[3, 5]`` in ``x`` and ``[.3, .7]`` in ``p`` were a single
 |  object, and as if we had ``x.shape = (2,)``, ``n.shape = (2,)``, and
 |  ``p.shape = ()``. To obtain the individual elements without broadcasting,
 |  we would do this:
 |  
 |  >>> multinomial.pmf([3, 4], n=7, p=[.3, .7])
 |  0.2268945
 |  >>> multinomial.pmf([3, 5], 8, p=[.3, .7])
 |  0.25412184
 |  
 |  This broadcasting also works for ``cov``, where the output objects are
 |  square matrices of size ``p.shape[-1]``. For example:
 |  
 |  >>> multinomial.cov([4, 5], [[.3, .7], [.4, .6]])
 |  array([[[ 0.84, -0.84],
 |          [-0.84,  0.84]],
 |         [[ 1.2 , -1.2 ],
 |          [-1.2 ,  1.2 ]]])
 |  
 |  In this example, ``n.shape == (2,)`` and ``p.shape == (2, 2)``, and
 |  following the rules above, these broadcast as if ``p.shape == (2,)``.
 |  Thus the result should also be of shape ``(2,)``, but since each output is
 |  a :math:`2 \times 2` matrix, the result in fact has shape ``(2, 2, 2)``,
 |  where ``result[0]`` is equal to ``multinomial.cov(n=4, p=[.3, .7])`` and
 |  ``result[1]`` is equal to ``multinomial.cov(n=5, p=[.4, .6])``.
 |  
 |  See also
 |  --------
 |  scipy.stats.binom : The binomial distribution.
 |  numpy.random.Generator.multinomial : Sampling from the multinomial distribution.
 |  scipy.stats.multivariate_hypergeom :
 |      The multivariate hypergeometric distribution.
 |  
 |  Method resolution order:
 |      multinomial_gen
 |      multi_rv_generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__(self, n, p, seed=None)
 |      Create a frozen multinomial distribution.
 |      
 |      See `multinomial_frozen` for more information.
 |  
 |  __init__(self, seed=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cov(self, n, p)
 |      Covariance matrix of the multinomial distribution.
 |      
 |      Parameters
 |      ----------
 |      n : int
 |          Number of trials
 |      p : array_like
 |          Probability of a trial falling into each category; should sum to 1
 |      
 |      Returns
 |      -------
 |      cov : ndarray
 |          The covariance matrix of the distribution
 |  
 |  entropy(self, n, p)
 |      Compute the entropy of the multinomial distribution.
 |      
 |      The entropy is computed using this expression:
 |      
 |      .. math::
 |      
 |          f(x) = - \log n! - n\sum_{i=1}^k p_i \log p_i +
 |          \sum_{i=1}^k \sum_{x=0}^n \binom n x p_i^x(1-p_i)^{n-x} \log x!
 |      
 |      Parameters
 |      ----------
 |      %(_doc_default_callparams)s
 |      
 |      Returns
 |      -------
 |      h : scalar
 |          Entropy of the Multinomial distribution
 |      
 |      Notes
 |      -----
 |      %(_doc_callparams_note)s
 |  
 |  logpmf(self, x, n, p)
 |      Log of the Multinomial probability mass function.
 |      
 |      Parameters
 |      ----------
 |      x : array_like
 |          Quantiles, with the last axis of `x` denoting the components.
 |      n : int
 |          Number of trials
 |      p : array_like
 |          Probability of a trial falling into each category; should sum to 1
 |      
 |      Returns
 |      -------
 |      logpmf : ndarray or scalar
 |          Log of the probability mass function evaluated at `x`
 |      
 |      Notes
 |      -----
 |      `n` should be a positive integer. Each element of `p` should be in the
 |      interval :math:`[0,1]` and the elements should sum to 1. If they do not sum to
 |      1, the last element of the `p` array is not used and is replaced with the
 |      remaining probability left over from the earlier elements.
 |  
 |  mean(self, n, p)
 |      Mean of the Multinomial distribution
 |      
 |      Parameters
 |      ----------
 |      n : int
 |          Number of trials
 |      p : array_like
 |          Probability of a trial falling into each category; should sum to 1
 |      
 |      Returns
 |      -------
 |      mean : float
 |          The mean of the distribution
 |  
 |  pmf(self, x, n, p)
 |      Multinomial probability mass function.
 |      
 |      Parameters
 |      ----------
 |      x : array_like
 |          Quantiles, with the last axis of `x` denoting the components.
 |      n : int
 |          Number of trials
 |      p : array_like
 |          Probability of a trial falling into each category; should sum to 1
 |      
 |      Returns
 |      -------
 |      pmf : ndarray or scalar
 |          Probability density function evaluated at `x`
 |      
 |      Notes
 |      -----
 |      `n` should be a positive integer. Each element of `p` should be in the
 |      interval :math:`[0,1]` and the elements should sum to 1. If they do not sum to
 |      1, the last element of the `p` array is not used and is replaced with the
 |      remaining probability left over from the earlier elements.
 |  
 |  rvs(self, n, p, size=None, random_state=None)
 |      Draw random samples from a Multinomial distribution.
 |      
 |      Parameters
 |      ----------
 |      n : int
 |          Number of trials
 |      p : array_like
 |          Probability of a trial falling into each category; should sum to 1
 |      size : integer or iterable of integers, optional
 |          Number of samples to draw (default 1).
 |      random_state : {None, int, np.random.RandomState, np.random.Generator}, optional
 |          Used for drawing random variates.
 |          If `seed` is `None` the `~np.random.RandomState` singleton is used.
 |          If `seed` is an int, a new ``RandomState`` instance is used, seeded
 |          with seed.
 |          If `seed` is already a ``RandomState`` or ``Generator`` instance,
 |          then that object is used.
 |          Default is None.
 |      
 |      Returns
 |      -------
 |      rvs : ndarray or scalar
 |          Random variates of shape (`size`, `len(p)`)
 |      
 |      Notes
 |      -----
 |      `n` should be a positive integer. Each element of `p` should be in the
 |      interval :math:`[0,1]` and the elements should sum to 1. If they do not sum to
 |      1, the last element of the `p` array is not used and is replaced with the
 |      remaining probability left over from the earlier elements.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from multi_rv_generic:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  random_state
 |      Get or set the RandomState object for generating random variates.
 |      
 |      This can be either None, int, a RandomState instance, or a
 |      np.random.Generator instance.
 |      
 |      If None (or np.random), use the RandomState singleton used by
 |      np.random.
 |      If already a RandomState or Generator instance, use it.
 |      If an int, use a new RandomState instance seeded with seed.

